// Generated by view binder compiler. Do not edit!
package com.example.googlemapstrial.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.googlemapstrial.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTriviaBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView TriviaGameTextView;

  @NonNull
  public final Button button;

  @NonNull
  public final Button option1Button;

  @NonNull
  public final Button option2Button;

  @NonNull
  public final Button option3Button;

  private ActivityTriviaBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView TriviaGameTextView, @NonNull Button button, @NonNull Button option1Button,
      @NonNull Button option2Button, @NonNull Button option3Button) {
    this.rootView = rootView;
    this.TriviaGameTextView = TriviaGameTextView;
    this.button = button;
    this.option1Button = option1Button;
    this.option2Button = option2Button;
    this.option3Button = option3Button;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTriviaBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTriviaBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_trivia, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTriviaBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TriviaGameTextView;
      TextView TriviaGameTextView = ViewBindings.findChildViewById(rootView, id);
      if (TriviaGameTextView == null) {
        break missingId;
      }

      id = R.id.button;
      Button button = ViewBindings.findChildViewById(rootView, id);
      if (button == null) {
        break missingId;
      }

      id = R.id.option1Button;
      Button option1Button = ViewBindings.findChildViewById(rootView, id);
      if (option1Button == null) {
        break missingId;
      }

      id = R.id.option2Button;
      Button option2Button = ViewBindings.findChildViewById(rootView, id);
      if (option2Button == null) {
        break missingId;
      }

      id = R.id.option3Button;
      Button option3Button = ViewBindings.findChildViewById(rootView, id);
      if (option3Button == null) {
        break missingId;
      }

      return new ActivityTriviaBinding((ConstraintLayout) rootView, TriviaGameTextView, button,
          option1Button, option2Button, option3Button);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
